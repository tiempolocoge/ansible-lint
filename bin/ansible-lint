#!/usr/bin/env python

import ansible.constants as C
import ansiblelint.utils as utils
import ansiblelint.formatters as formatters
from ansiblelint import RulesCollection
import ansiblelint
import errno
import os
import sys
import optparse

VERSION = "0.1.0"


def main(args):

    formatter = formatters.Formatter()

    parser = optparse.OptionParser("%prog playbook.yml",
                                   version="%prog " + VERSION)

    defaultrulesdir = os.path.join(os.path.dirname(utils.__file__), 'rules'),
    parser.add_option('-L', dest='listrules', default=False,
                      action='store_true', help="list all the rules")
    parser.add_option('-q', dest='quiet', default=False, action='store_true',
                      help="quieter, although not silent output")
    parser.add_option('-r', dest="rulesdir",
                      help="one or more (separator='" + os.path.pathsep +
                      "') rules directories (default=%default)",
                      default=defaultrulesdir)
    parser.add_option('-t', dest='tags', default = [],
                      help="only check rules tagged with these values")
    parser.add_option('-T', dest='listtags', action='store_true',
                      help="list all the tags")
    parser.add_option('-x', dest='skip_tags', default = [],
                      help="only check rules whose tags do not " +
                      "match these values")
    options, args = parser.parse_args(args)

    if options.quiet:
        formatter = formatters.QuietFormatter()

    if len(args) == 0 and not (options.listrules or options.listtags):
        parser.print_help(file=sys.stderr)
        return 1

    rules = RulesCollection()
    for rulesdir in options.rulesdir.split(os.path.pathsep):
        rules.extend(RulesCollection.create_from_directory(rulesdir))

    if options.listrules:
        print rules
        return 0

    if options.listtags:
        print rules.listtags()
        return 0

    if isinstance(options.tags, basestring):
        options.tags = options.tags.split(',')
    if isinstance(options.skip_tags, basestring):
        options.skip_tags = options.skip_tags.split(',')

    playbooks = set(args)
    runner = ansiblelint.Runner(rules, playbooks, options.tags, 
            options.skip_tags)
    matches = runner.run()

    for match in matches:
        print formatter.format(match)

    if len(matches):
        return 2
    else:
        return 0


if __name__ == "__main__":
    try:
        sys.exit(main(sys.argv[1:]))
    except IOError as exc:
        if exc.errno != errno.EPIPE:
            raise
